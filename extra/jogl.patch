diff -ur jogl-v2.3.2-orig/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java jogl-v2.3.2/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java
--- jogl-v2.3.2-orig/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java	2016-06-20 08:47:10.000000000 +0200
@@ -1122,7 +1122,7 @@
                                   //
                                   // FIXME: IMHO this synchronization should be implicitly performed via 'CGL.flushBuffer(contextHandle)' above,
                                   // in case this will be determined a driver bug - use a QUIRK entry in GLRendererQuirks!
-                                  gl.glFinish();
+                                  // gl.glFinish();
 
                                   // If v-sync is disabled, frames will be drawn as quickly as possible w/o delay,
                                   // while still synchronizing w/ CALayer.
diff -ur jogl-v2.3.2-orig/src/nativewindow/native/macosx/OSXmisc.m jogl-v2.3.2/src/nativewindow/native/macosx/OSXmisc.m
--- jogl-v2.3.2-orig/src/nativewindow/native/macosx/OSXmisc.m	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/nativewindow/native/macosx/OSXmisc.m	2016-06-20 08:47:10.000000000 +0200
@@ -336,6 +336,7 @@
   (JNIEnv *env, jclass unused, jint x, jint y, jint width, jint height)
 {
     NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+    [CATransaction begin];
     NSRect rect = NSMakeRect(x, y, width, height);
 
     // Allocate the window
@@ -365,6 +366,7 @@
     // [myView lockFocus];
     // [myView unlockFocus];
 
+    [CATransaction commit];
     [pool release];
 
     return (jlong) ((intptr_t) myWindow);
@@ -379,9 +381,12 @@
   (JNIEnv *env, jclass unused, jlong nsWindow)
 {
     NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
-    NSWindow* mWin = (NSWindow*) ((intptr_t) nsWindow);
+    [CATransaction begin];
 
+    NSWindow* mWin = (NSWindow*) ((intptr_t) nsWindow);
     [mWin close]; // performs release!
+
+    [CATransaction commit];
     [pool release];
 }
 
diff -ur jogl-v2.3.2-orig/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java jogl-v2.3.2/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java
--- jogl-v2.3.2-orig/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java	2016-06-20 09:21:16.000000000 +0200
@@ -744,7 +744,11 @@
                 if( 0 != surfaceHandle ) {
                     throw new NativeWindowException("Internal Error - create w/o window, but has Newt NSView");
                 }
-                surfaceHandle = createView0(pS.getX(), pS.getY(), width, height);
+                OSXUtil.RunOnMainThread(true, false /* kickNSApp */, new Runnable() {
+                    @Override
+                    public void run() {
+                        surfaceHandle = createView0(pS.getX(), pS.getY(), width, height);
+                    } });
                 if( 0 == surfaceHandle ) {
                     throw new NativeWindowException("Could not create native view "+Thread.currentThread().getName()+" "+this);
                 }
@@ -763,20 +767,20 @@
                 }
                 windowStyle = ws;
             }
-            final long newWin = createWindow0( pS.getX(), pS.getY(), width, height,
-                                               0 != ( STATE_MASK_FULLSCREEN & flags),
-                                               windowStyle,
-                                               NSBackingStoreBuffered, surfaceHandle);
-            if ( newWin == 0 ) {
-                throw new NativeWindowException("Could not create native window "+Thread.currentThread().getName()+" "+this);
-            }
-            setWindowHandle( newWin );
-
-            final boolean isOpaque = getGraphicsConfiguration().getChosenCapabilities().isBackgroundOpaque() && !offscreenInstance;
             // Blocking initialization on main-thread!
             OSXUtil.RunOnMainThread(true, false /* kickNSApp */, new Runnable() {
                     @Override
                     public void run() {
+                        long newWin = createWindow0( pS.getX(), pS.getY(), width, height,
+                                                     0 != ( STATE_MASK_FULLSCREEN & flags),
+                                                     windowStyle,
+                                                     NSBackingStoreBuffered, surfaceHandle);
+                        if ( newWin == 0 ) {
+                            throw new NativeWindowException("Could not create native window "+Thread.currentThread().getName()+" "+this);
+                        }
+                        setWindowHandle( newWin );
+
+                        boolean isOpaque = getGraphicsConfiguration().getChosenCapabilities().isBackgroundOpaque() && !offscreenInstance;
                         initWindow0( parentWinHandle, newWin, pS.getX(), pS.getY(), width, height, reqPixelScale[0] /* HiDPI uniformPixelScale */,
                                      isOpaque,
                                      !offscreenInstance && 0 != ( STATE_MASK_ALWAYSONTOP & flags),
diff -ur jogl-v2.3.2-orig/src/newt/native/MacWindow.m jogl-v2.3.2/src/newt/native/MacWindow.m
--- jogl-v2.3.2-orig/src/newt/native/MacWindow.m	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/newt/native/MacWindow.m	2016-10-03 15:41:48.000000000 +0200
@@ -821,10 +821,14 @@
                                                styleMask: (NSUInteger) styleMask
                                                backing: (NSBackingStoreType) bufferingType
                                                defer: YES
-                                               isFullscreenWindow: fullscreen];
+                                               isFullscreenWindow: false];
     // DBG_PRINT( "createWindow0.1 - %p, isVisible %d\n", myWindow, [myWindow isVisible]);
 
     DBG_PRINT( "createWindow0.X - %p, isVisible %d\n", myWindow, [myWindow isVisible]);
+    if (fullscreen)
+        [NSApp setPresentationOptions:(NSApplicationPresentationAutoHideMenuBar | NSApplicationPresentationAutoHideDock)];
+    else
+        [NSApp setPresentationOptions:NSApplicationPresentationDefault];
 
     [pool release];
 
