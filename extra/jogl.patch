diff -ur jogl-v2.3.2-orig/src/jogl/classes/jogamp/opengl/GLContextImpl.java jogl-v2.3.2/src/jogl/classes/jogamp/opengl/GLContextImpl.java
--- jogl-v2.3.2-orig/src/jogl/classes/jogamp/opengl/GLContextImpl.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/jogl/classes/jogamp/opengl/GLContextImpl.java	2018-05-09 11:09:33.000000000 +0200
@@ -2113,7 +2113,7 @@
     final boolean isES = 0 != ( ctp & GLContext.CTX_PROFILE_ES );
     final boolean isX11 = NativeWindowFactory.TYPE_X11 == NativeWindowFactory.getNativeWindowType(true);
     final boolean isWindows = Platform.getOSType() == Platform.OSType.WINDOWS;
-    final boolean isDriverMesa = glRenderer.contains(MesaSP) || glRenderer.contains("Gallium ");
+    final boolean isDriverMesa = glRenderer.contains(MesaSP) || glRenderer.contains("Gallium ") || glVersion.contains(MesaSP);
 
     final boolean isDriverATICatalyst;
     final boolean isDriverNVIDIAGeForce;
diff -ur jogl-v2.3.2-orig/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java jogl-v2.3.2/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java
--- jogl-v2.3.2-orig/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/jogl/classes/jogamp/opengl/macosx/cgl/MacOSXCGLContext.java	2017-06-09 11:30:21.000000000 +0200
@@ -1122,7 +1122,7 @@
                                   //
                                   // FIXME: IMHO this synchronization should be implicitly performed via 'CGL.flushBuffer(contextHandle)' above,
                                   // in case this will be determined a driver bug - use a QUIRK entry in GLRendererQuirks!
-                                  gl.glFinish();
+                                  // gl.glFinish();
 
                                   // If v-sync is disabled, frames will be drawn as quickly as possible w/o delay,
                                   // while still synchronizing w/ CALayer.
diff -ur jogl-v2.3.2-orig/src/nativewindow/classes/jogamp/nativewindow/jawt/macosx/MacOSXJAWTWindow.java jogl-v2.3.2/src/nativewindow/classes/jogamp/nativewindow/jawt/macosx/MacOSXJAWTWindow.java
--- jogl-v2.3.2-orig/src/nativewindow/classes/jogamp/nativewindow/jawt/macosx/MacOSXJAWTWindow.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/nativewindow/classes/jogamp/nativewindow/jawt/macosx/MacOSXJAWTWindow.java	2018-09-06 00:14:28.000000000 +0200
@@ -95,12 +95,12 @@
       offscreenSurfaceDrawable=0;
       offscreenSurfaceDrawableSet=false;
       if( isOffscreenLayerSurfaceEnabled() ) {
-          if(0 != windowHandle) {
-              OSXUtil.DestroyNSWindow(windowHandle);
-          }
           OSXUtil.RunOnMainThread(false, true /* kickNSApp */, new Runnable() {
               @Override
               public void run() {
+                  if(0 != windowHandle) {
+                      OSXUtil.DestroyNSWindow(windowHandle);
+                  }
                   if( 0 != jawtSurfaceLayersHandle) {
                       // null rootSurfaceLayer OK
                       UnsetJAWTRootSurfaceLayer0(jawtSurfaceLayersHandle, rootSurfaceLayer);
@@ -309,7 +309,7 @@
          * The actual surface/ca-layer shall be created/attached
          * by the upper framework (JOGL) since they require more information.
          */
-        String errMsg = null;
+/*        String errMsg = null;
         if(0 == drawable) {
             windowHandle = OSXUtil.CreateNSWindow(0, 0, 64, 64);
             if(0 == windowHandle) {
@@ -327,12 +327,39 @@
                 setChosenCapabilities(caps);
             }
         }
-        if(null == errMsg) {
+        if(null == errMsg)*/ {
             jawtSurfaceLayersHandle = GetJAWTSurfaceLayersHandle0(dsi.getBuffer());
             OSXUtil.RunOnMainThread(false, false, new Runnable() {
                     @Override
                     public void run() {
                         String errMsg = null;
+
+                        windowHandle = OSXUtil.CreateNSWindow(0, 0, 64, 64);
+                        if(0 == windowHandle) {
+                            errMsg = "Unable to create dummy NSWindow (layered case)";
+                        } else {
+                            drawable = OSXUtil.GetNSView(windowHandle);
+                            if(0 == drawable) {
+                              errMsg = "Null NSView of NSWindow "+toHexString(windowHandle);
+                            }
+                        }
+                        if(null == errMsg) {
+                            // Fix caps reflecting offscreen! (no GL available here ..)
+                            final Capabilities caps = (Capabilities) getGraphicsConfiguration().getChosenCapabilities().cloneMutable();
+                            caps.setOnscreen(false);
+                            setChosenCapabilities(caps);
+                        }
+
+                        if(null != errMsg) {
+                            if(0 != windowHandle) {
+                                OSXUtil.DestroyNSWindow(windowHandle);
+                                windowHandle = 0;
+                            }
+                            drawable = 0;
+                            unlockSurfaceImpl();
+                            throw new NativeWindowException(errMsg+": "+this);
+                        }
+
                         if(0 == rootSurfaceLayer && 0 != jawtSurfaceLayersHandle) {
                             rootSurfaceLayer = OSXUtil.CreateCALayer(bounds.getWidth(), bounds.getHeight(), getPixelScaleX()); // HiDPI: uniform pixel scale
                             if(0 == rootSurfaceLayer) {
@@ -354,7 +381,7 @@
                         }
                     } } );
         }
-        if(null != errMsg) {
+/*        if(null != errMsg) {
             if(0 != windowHandle) {
               OSXUtil.DestroyNSWindow(windowHandle);
               windowHandle = 0;
@@ -362,7 +389,7 @@
             drawable = 0;
             unlockSurfaceImpl();
             throw new NativeWindowException(errMsg+": "+this);
-        }
+        } */
         ret = NativeSurface.LOCK_SUCCESS;
     }
 
diff -ur jogl-v2.3.2-orig/src/nativewindow/classes/jogamp/nativewindow/macosx/OSXDummyUpstreamSurfaceHook.java jogl-v2.3.2/src/nativewindow/classes/jogamp/nativewindow/macosx/OSXDummyUpstreamSurfaceHook.java
--- jogl-v2.3.2-orig/src/nativewindow/classes/jogamp/nativewindow/macosx/OSXDummyUpstreamSurfaceHook.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/nativewindow/classes/jogamp/nativewindow/macosx/OSXDummyUpstreamSurfaceHook.java	2018-09-06 00:13:42.000000000 +0200
@@ -25,6 +25,9 @@
 
     @Override
     public final void create(final ProxySurface s) {
+        OSXUtil.RunOnMainThread(true, false, new Runnable() {
+        @Override
+        public void run() {
         if(0 == nsWindow && 0 == s.getSurfaceHandle()) {
             nsWindow = OSXUtil.CreateNSWindow(0, 0, 64, 64);
             if(0 == nsWindow) {
@@ -38,10 +41,15 @@
             s.addUpstreamOptionBits( ProxySurface.OPT_PROXY_OWNS_UPSTREAM_SURFACE );
         }
         s.addUpstreamOptionBits(ProxySurface.OPT_UPSTREAM_WINDOW_INVISIBLE);
+        }
+        });
     }
 
     @Override
     public final void destroy(final ProxySurface s) {
+        OSXUtil.RunOnMainThread(true, false, new Runnable() {
+        @Override
+        public void run() {
         if( s.containsUpstreamOptionBits( ProxySurface.OPT_PROXY_OWNS_UPSTREAM_SURFACE ) ) {
             if( 0 == nsWindow || 0 == s.getSurfaceHandle() ) {
                 throw new InternalError("Owns upstream surface, but no OSX view/window: "+s+", nsWindow 0x"+Long.toHexString(nsWindow));
@@ -51,6 +59,8 @@
             s.setSurfaceHandle(0);
             s.clearUpstreamOptionBits( ProxySurface.OPT_PROXY_OWNS_UPSTREAM_SURFACE );
         }
+        }
+        });
     }
 
 }
diff -ur jogl-v2.3.2-orig/src/nativewindow/native/macosx/OSXmisc.m jogl-v2.3.2/src/nativewindow/native/macosx/OSXmisc.m
--- jogl-v2.3.2-orig/src/nativewindow/native/macosx/OSXmisc.m	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/nativewindow/native/macosx/OSXmisc.m	2016-06-20 08:47:10.000000000 +0200
@@ -336,6 +336,7 @@
   (JNIEnv *env, jclass unused, jint x, jint y, jint width, jint height)
 {
     NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+    [CATransaction begin];
     NSRect rect = NSMakeRect(x, y, width, height);
 
     // Allocate the window
@@ -365,6 +366,7 @@
     // [myView lockFocus];
     // [myView unlockFocus];
 
+    [CATransaction commit];
     [pool release];
 
     return (jlong) ((intptr_t) myWindow);
@@ -379,9 +381,12 @@
   (JNIEnv *env, jclass unused, jlong nsWindow)
 {
     NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
-    NSWindow* mWin = (NSWindow*) ((intptr_t) nsWindow);
+    [CATransaction begin];
 
+    NSWindow* mWin = (NSWindow*) ((intptr_t) nsWindow);
     [mWin close]; // performs release!
+
+    [CATransaction commit];
     [pool release];
 }
 
diff -ur jogl-v2.3.2-orig/src/newt/classes/com/jogamp/newt/awt/NewtCanvasAWT.java jogl-v2.3.2/src/newt/classes/com/jogamp/newt/awt/NewtCanvasAWT.java
--- jogl-v2.3.2-orig/src/newt/classes/com/jogamp/newt/awt/NewtCanvasAWT.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/newt/classes/com/jogamp/newt/awt/NewtCanvasAWT.java	2018-05-27 18:21:20.000000000 +0200
@@ -747,7 +747,7 @@
                 if(DEBUG) {
                     System.err.println("NewtCanvasAWT.reshape: "+x+"/"+y+" "+width+"x"+height);
                 }
-                if( validateComponent(true) ) {
+                if( validateComponent(true) && /* workaround for possible lockup */ !newtChild.isFullscreen()) {
                     if( !printActive && updatePixelScale(getGraphicsConfiguration()) ) {
                         // NOP
                     } else {
diff -ur jogl-v2.3.2-orig/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java jogl-v2.3.2/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java
--- jogl-v2.3.2-orig/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/newt/classes/jogamp/newt/driver/macosx/WindowDriver.java	2016-06-20 09:21:16.000000000 +0200
@@ -744,7 +744,11 @@
                 if( 0 != surfaceHandle ) {
                     throw new NativeWindowException("Internal Error - create w/o window, but has Newt NSView");
                 }
-                surfaceHandle = createView0(pS.getX(), pS.getY(), width, height);
+                OSXUtil.RunOnMainThread(true, false /* kickNSApp */, new Runnable() {
+                    @Override
+                    public void run() {
+                        surfaceHandle = createView0(pS.getX(), pS.getY(), width, height);
+                    } });
                 if( 0 == surfaceHandle ) {
                     throw new NativeWindowException("Could not create native view "+Thread.currentThread().getName()+" "+this);
                 }
@@ -763,20 +767,20 @@
                 }
                 windowStyle = ws;
             }
-            final long newWin = createWindow0( pS.getX(), pS.getY(), width, height,
-                                               0 != ( STATE_MASK_FULLSCREEN & flags),
-                                               windowStyle,
-                                               NSBackingStoreBuffered, surfaceHandle);
-            if ( newWin == 0 ) {
-                throw new NativeWindowException("Could not create native window "+Thread.currentThread().getName()+" "+this);
-            }
-            setWindowHandle( newWin );
-
-            final boolean isOpaque = getGraphicsConfiguration().getChosenCapabilities().isBackgroundOpaque() && !offscreenInstance;
             // Blocking initialization on main-thread!
             OSXUtil.RunOnMainThread(true, false /* kickNSApp */, new Runnable() {
                     @Override
                     public void run() {
+                        long newWin = createWindow0( pS.getX(), pS.getY(), width, height,
+                                                     0 != ( STATE_MASK_FULLSCREEN & flags),
+                                                     windowStyle,
+                                                     NSBackingStoreBuffered, surfaceHandle);
+                        if ( newWin == 0 ) {
+                            throw new NativeWindowException("Could not create native window "+Thread.currentThread().getName()+" "+this);
+                        }
+                        setWindowHandle( newWin );
+
+                        boolean isOpaque = getGraphicsConfiguration().getChosenCapabilities().isBackgroundOpaque() && !offscreenInstance;
                         initWindow0( parentWinHandle, newWin, pS.getX(), pS.getY(), width, height, reqPixelScale[0] /* HiDPI uniformPixelScale */,
                                      isOpaque,
                                      !offscreenInstance && 0 != ( STATE_MASK_ALWAYSONTOP & flags),
diff -ur jogl-v2.3.2-orig/src/newt/native/MacWindow.m jogl-v2.3.2/src/newt/native/MacWindow.m
--- jogl-v2.3.2-orig/src/newt/native/MacWindow.m	2015-10-10 03:08:14.000000000 +0200
+++ jogl-v2.3.2/src/newt/native/MacWindow.m	2016-10-03 15:41:48.000000000 +0200
@@ -821,10 +821,14 @@
                                                styleMask: (NSUInteger) styleMask
                                                backing: (NSBackingStoreType) bufferingType
                                                defer: YES
-                                               isFullscreenWindow: fullscreen];
+                                               isFullscreenWindow: false];
     // DBG_PRINT( "createWindow0.1 - %p, isVisible %d\n", myWindow, [myWindow isVisible]);
 
     DBG_PRINT( "createWindow0.X - %p, isVisible %d\n", myWindow, [myWindow isVisible]);
+    if (fullscreen)
+        [NSApp setPresentationOptions:(NSApplicationPresentationAutoHideMenuBar | NSApplicationPresentationAutoHideDock)];
+    else
+        [NSApp setPresentationOptions:NSApplicationPresentationDefault];
 
     [pool release];
 
