<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="build" default="all">

    <property name="plugin.name" value="SWEKPlugin"/>
    <property name="plugin.package" value="swek"/>
    <property name="jhv.root" value="${basedir}/../../.."/>
    <property name="jhv.bin" value="${jhv.root}/bin/jhv/"/>
    <property name="jhv.build.resources" value="${jhv.root}/build-resources/"/>
    <property name="jhv.lib" value="${jhv.root}/lib/"/>
    <property name="jhv.build" value="${jhv.root}/build/"/>
    <property name="src" value="${basedir}/src/"/>
    <property name="bin.eclipse" value="${basedir}/bin/"/>
    <property name="resources" value="${basedir}/resources/"/>
    <property name="lib" value="${basedir}/lib/"/>
    <property name="build" value="${basedir}/build/"/>
    <property name="build.resources" value="${basedir}/build-resources/"/>
    <property name="bin" value="${basedir}/build-bin/"/>
    <property name="temp" value="${basedir}/temp/"/>
    <property name="plugins.dir" value="${user.home}/JHelioviewer-SWHV/Plugins/"/>
    <property name="sweksources" value="${basedir}/sources"/>
    <property name="sweksources.lib" value="${sweksources}/*/lib"/>
    <property environment="env"/>
    <path id="lib.path.ref">
        <fileset dir="${env.RT_PATH}" includes="classes.jar"/>
    </path>
    <!-- Include ant-contrib -->
    <echo message="build resources : ${jhv.build.resources}"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${jhv.build.resources}shared/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <target name="all" depends="copy-to-root-build"/>

    <!-- build classes of main jhv project -->
    <target name="jhv.compile">
        <echo message="basedir is ${basedir}"/>
        <echo message="jhv build is ${jhv.build}"/>
        <ant inheritAll="false" target="compile" antfile="${jhv.root}/build.xml" dir="${jhv.root}"/>
        <ant inheritAll="false" target="compile_without" antfile="${jhv.root}/build.xml"/>
    </target>

    <!-- Create directory structure -->
    <target name="mkdir">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.resources}"/>
        <mkdir dir="${bin}"/>
        <mkdir dir="${bin.eclipse}"/>
        <mkdir dir="${resources}"/>
        <mkdir dir="${lib}"/>
        <mkdir dir="${src}"/>
    </target>

    <!-- Delete generated files -->
    <target name="clean">
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${bin}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${build}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${bin.eclipse}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <antcall target="mkdir"/>
        <subant target="clean">
            <fileset dir="./sources/" includes="*/build.xml"/>
        </subant>
    </target>

    <!-- Determine revision and version -->
    <target name="init" depends="mkdir">
        <echo message="Trying to determine revision"/>
        <loadfile property="version" srcFile="VERSION"/>
        <property name="version" value="1.0.0"/>
        <if>
            <equals arg1="${revision.retcode}" arg2="0"/>
            <then>
                <property name="revision" value="${revision.tmp}"/>
            </then>
            <else>
                <property name="revision" value="0"/>
            </else>
        </if>
    </target>

    <!-- Compile sources -->
    <target name="compile" depends="jhv.compile, init, bootclasspath.check" if="bootclasspath.exists">
        <echo message="compile with bootclasspath"/>
        <javac srcdir="${src}" destdir="${bin}" target="1.6" source="1.6" debug="on" debuglevel="source,lines,vars" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Xbootclasspath/p:${toString:lib.path.ref}"/>
            <classpath>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${jhv.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${jhv.bin}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile_without" depends="jhv.compile, init, bootclasspath.check" unless="bootclasspath.exists">
        <echo message="compile without bootclasspath"/>
        <javac srcdir="${src}" destdir="${bin}" target="1.6" source="1.6" debug="on" debuglevel="source,lines,vars" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <classpath>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${jhv.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${jhv.bin}"/>
            </classpath>
        </javac>
    </target>

    <target name="bootclasspath.check">
        <condition property="bootclasspath.exists">
            <available file="${env.RT_PATH}" type="dir" />
        </condition>
    </target>
    <!-- Jar bundle -->
    <target name="jar-bundle" depends="compile, compile_without">
        <!-- JAR File -->
        <jar destfile="${build}/${plugin.name}.jar">
            <manifest>
                <attribute name="Main-Class" value="org.helioviewer.jhv.plugins.${plugin.package}.${plugin.name}"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Implementation-Version" value="v${version}r${revision}"/>
                <attribute name="version" value="${version}"/>
                <attribute name="revision" value="${revision}"/>
            </manifest>
            <fileset dir="${bin}"/>
            <fileset dir="${resources}"/>
            <fileset file="README"/>
            <fileset file="COPYING"/>
            <zipgroupfileset dir="${lib}" includes="**/*.jar" />
        </jar>
        <subant target="jar-bundle">
            <fileset dir="./sources/" includes="*/build.xml"/>
        </subant>
        <jar destfile="${build}/${plugin.name}.jar" update="true" >
            <zipfileset dir="${sweksources}/HEKSource/build/" includes="*.jar" prefix="sources" />
            <zipfileset dir="${sweksources}/ComesepSource/build/" includes="*.jar" prefix="sources" />
        </jar>
    </target>

    <!-- install/release plugin -->
    <target name="copy-to-root-build" depends="jar-bundle">
        <copy todir="${jhv.build}">
            <fileset dir="${build}"/>
        </copy>
        <subant target="copy-to-root-build">
            <fileset dir="./sources/" includes="*/build.xml"/>
        </subant>
    </target>

    <target name="install-plugin" depends="jar-bundle">
        <copy file="${build}/${plugin.name}.jar" todir="${plugins.dir}"/>
        <copy file="${build}/${plugin.name}.jar" todir="${jhv.root}/plugins"/>
        <subant target="install-source">
            <fileset dir="./sources/" includes="*/build.xml"/>
        </subant>
    </target>

</project>
