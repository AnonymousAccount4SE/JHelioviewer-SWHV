<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="build" default="all">

    <property name="plugin.name" value="EVEPlugin"/>
    <property name="plugin.package" value="eveplugin"/>
    <property name="jhv.root" value="${basedir}/../../.."/>
    <property name="jhv.bin" value="${jhv.root}/bin/jhv/"/>
    <property name="jhv.build.resources" value="${jhv.root}/build-resources/"/>
    <property name="jhv.lib" value="${jhv.root}/lib/"/>
    <property name="jhv.build" value="${jhv.root}/build/"/>
    <property name="src" value="${basedir}/src/"/>
    <property name="doc" value="${basedir}/doc/"/>
    <property name="bin.eclipse" value="${basedir}/bin/"/>
    <property name="resources" value="${basedir}/resources/"/>
    <property name="lib" value="${basedir}/lib/"/>
    <property name="build" value="${basedir}/build/"/>
    <property name="build.resources" value="${basedir}/build-resources/"/>
    <property name="bin" value="${basedir}/build-bin/"/>
    <property name="temp" value="${basedir}/temp/"/>
    <property name="bzrpath" value="bzr"/>
    <property name="plugins.dir" value="${user.home}/JHelioviewer-SWHV/Plugins/"/>
    <property environment="env"/>
    <path id="lib.path.ref">
        <fileset dir="${env.RT_PATH}" includes="classes.jar"/>
    </path>
    <!-- Include ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${jhv.build.resources}/shared/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <target name="all" depends="jar-bundle, bundle-src"/>

    <!-- build classes of main jhv project -->
    <target name="jhv.compile">
        <ant inheritAll="false" target="compile" antfile="${jhv.root}/build.xml"/>
    </target>

    <!-- Create directory structure -->
    <target name="mkdir">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.resources}"/>
        <mkdir dir="${bin}"/>
        <mkdir dir="${bin.eclipse}"/>
        <mkdir dir="${resources}"/>
        <mkdir dir="${lib}"/>
        <mkdir dir="${src}"/>
        <mkdir dir="${doc}"/>
    </target>

    <!-- Delete generated files -->
    <target name="clean">
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${bin}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${build}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${doc}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${bin.eclipse}" followsymlinks="false" defaultexcludes="no"/>
        </delete>
        <antcall target="mkdir"/>
    </target>

    <!-- Determine revision and version -->
    <target name="init" depends="mkdir">
        <echo message="Trying to determine revision"/>
        <!-- <exec
            executable="${bzrpath}"
            outputproperty="revision.tmp"
            resolveexecutable="true"
            searchpath="true"
            resultproperty="revision.retcode"
            failifexecutionfails="false">
                <arg value="revno"/>
        </exec> -->
        <loadfile property="version" srcFile="VERSION"/>
        <property name="version" value="1.0.0"/>
        <if>
            <equals arg1="${revision.retcode}" arg2="0"/>
            <then>
                <property name="revision" value="${revision.tmp}"/>
            </then>
            <else>
                <property name="revision" value="0"/>
            </else>
        </if>
    </target>

    <!-- Compile sources -->
    <target name="compile" depends="jhv.compile, init, bootclasspath.check" if="bootclasspath.exists">
        <echo message="compile with bootclasspath"/>
        <javac srcdir="${src}" destdir="${bin}" target="1.6" source="1.6" debug="on" debuglevel="source,lines,vars" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Xbootclasspath/p:${toString:lib.path.ref}"/>
            <classpath>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${jhv.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${jhv.bin}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile_without" depends="jhv.compile, init, bootclasspath.check" unless="bootclasspath.exists">
        <echo message="compile without bootclasspath"/>
        <javac srcdir="${src}" destdir="${bin}" target="1.6" source="1.6" debug="on" debuglevel="source,lines,vars" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <classpath>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${jhv.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${jhv.bin}"/>
            </classpath>
        </javac>
    </target>

    <target name="bootclasspath.check">
        <condition property="bootclasspath.exists">
            <available file="${env.RT_PATH}" type="dir" />
        </condition>
    </target>
    
    <!-- Jar bundle -->
    <target name="jar-bundle" depends="compile, compile_without">
        <!-- JAR File -->
        <jar destfile="${build}/${plugin.name}.jar">
            <manifest>
                <attribute name="Main-Class" value="org.helioviewer.jhv.plugins.${plugin.package}.${plugin.name}"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Implementation-Version" value="v${version}r${revision}"/>
                <attribute name="version" value="${version}"/>
                <attribute name="revision" value="${revision}"/>
            </manifest>
            <fileset dir="${bin}"/>
            <fileset dir="${resources}"/>
            <fileset file="README"/>
            <fileset file="COPYING"/>
            <zipgroupfileset dir="${lib}" includes="**/*.jar"/>
        </jar>
    </target>

    <!-- Source bundle -->
    <target name="bundle-src" depends="bundle-src-zip, bundle-src-tar"/>
    <target name="build-init" depends="init">
        <property name="pkg.name" value="${plugin.name}-${version}.${revision}"/>
    </target>

    <target name="bundle-src-prepare" depends="build-init">
        <mkdir dir="${jhv.bin}/build"/>
        <javac destdir="${jhv.bin}/build/" srcdir="${jhv.build.resources}/shared/" includes="**/ManifestGenerator.java">
            <compilerarg value="-Xlint:all"/>
        </javac>
        <taskdef name="generateManifest" classname="ManifestGenerator">
            <classpath location="${jhv.bin}/build/"/>
        </taskdef>
        <mkdir dir="${temp}/build/src"/>
        <delete file="${temp}/build/src/bzrstatus"/>
        <exec executable="${bzrpath}" output="${temp}/build/src/bzrstatus" resolveexecutable="true" searchpath="true">
            <arg value="status"/>
            <arg value="-S"/>
            <arg value="-r"/>
            <arg value="0"/>
        </exec>
        <delete file="${temp}/build/src/bzrfiles"/>
        <generateManifest input="${temp}/build/src/bzrstatus" output="${temp}/build/src/bzrfiles"/>
        <loadfile property="files" srcFile="${temp}/build/src/bzrfiles"/>
    </target>

    <target name="bundle-src-tar" depends="bundle-src-prepare">
        <tar destfile="${build}/${pkg.name}.src.tar.gz" compression="gzip" defaultexcludes="no" longfile="gnu">
            <zipfileset dir="." includes="${files}" prefix="${pkg.name}-src/" defaultexcludes="no"/>
        </tar>
    </target>

    <target name="bundle-src-zip" depends="bundle-src-prepare">
        <zip destfile="${build}/${pkg.name}.src.zip" defaultexcludes="no">
            <zipfileset dir="." includes="${files}" defaultexcludes="no" prefix="${pkg.name}-src/"/>
        </zip>
    </target>

    <!-- documentation -->
    <target name="doc" depends="jhv.compile">
        <javadoc access="private" destdir="${doc}" author="true" version="true" use="true" windowtitle="JHelioviewer API" sourcepath="${src}" linksource="true">
            <classpath>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${jhv.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${jhv.bin}"/>
            </classpath>
        </javadoc>
    </target>

    <!-- install/release plugin -->
    <target name="copy-to-root-build" depends="jar-bundle, bundle-src">
        <copy todir="${jhv.build}">
            <fileset dir="${build}"/>
        </copy>
    </target>

    <!-- Install the plugins -->
    <target name="install-plugin" depends="jar-bundle">
        <copy file="${build}/${plugin.name}.jar" todir="${plugins.dir}"/>
        <copy file="${build}/${plugin.name}.jar" todir="${jhv.root}/plugins"/>
    </target>

</project>
